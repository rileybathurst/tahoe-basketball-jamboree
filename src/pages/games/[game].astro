---
import Layout from "../../components/layout.astro";
import Scorecard from "../../components/scorecard.astro";
import { gameTeamFragment } from "../../fragments/game-team-fragment";
import { gameDetailFragment } from "../../fragments/game-detail-fragment";
import qs from "qs";

// ! because this doesnt go through strapi, it doesnt have the populate boolean issue
export async function getStaticPaths() {
  const url = new URL(`${import.meta.env.STRAPI_URL}api/games`);

  const query = qs.stringify({
    populate: {
      home_team: {
        gameTeamFragment,
      },
      away_team: {
        gameTeamFragment,
      },
      gameDetailFragment,
      location: {
        populate: {
          name: true,
        },
      },
      round: {
        populate: {
          name: true,
        },
      },
      fallback_winner: {
        populate: {
          name: true,
        },
      },
    },
  });

  // You cant do a limit of more than 100 so we have to do it in chunks
  // const limit = 999;

  // `${import.meta.env.STRAPI_API_URL}/api/articles?pagination[page]=${page}&pagination[pageSize]=${pageSize}&populate=*`

  // console.log(data);
  interface GameData {
    id: number;
    attributes: {
      name: string;
      // Add other attributes as needed
    };
  }

  let data: GameData[] = [];
  let start = 0;
  const limit = 25;
  let hasMore = true;

  while (hasMore) {
    const response = await fetch(
      `${url}?${query}&pagination[start]=${start}&pagination[limit]=${limit}`
    );
    const pageData = await response.json();
    data = data.concat(pageData.data);

    if (pageData.data.length < limit) {
      hasMore = false;
    } else {
      start += limit;
    }
  }

  // console.log(data);
  // console.log(data.data);

  interface gameTypes {
    id: number;
  }
  return data.map((game: gameTypes) => {
    // console.log(game);
    // console.log(game.id);
    return {
      params: { game: game.id },
      props: { game },
    };
  });
}

interface gamePageTypes {
  attributes: {
    name: number;
  };
}
const { game } = Astro.props as unknown as { game: gamePageTypes };

// console.log(game);
// console.log(game.attributes);
// console.log(game.attributes.location);
---

<Layout>
  <main>
    <section class="scoredeck">
      <!-- TODO: dont link to the page its already on -->
      <Scorecard {...game.attributes} />
    </section>
  </main>
</Layout>
