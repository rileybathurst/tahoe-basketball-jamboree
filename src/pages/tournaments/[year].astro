---
import Layout from "../../components/layout.astro";
import {
  BlocksRenderer,
  type BlocksContent,
} from "@strapi/blocks-react-renderer";
import Scorecard from "../../components/scorecard.astro";
// TODO: I can maybe use the lib/strapi.ts or build this into a new one
import qs from "qs";
import { gameTeamFragment } from "../../fragments/game-team-fragment";
import { gameDetailFragment } from "../../fragments/game-detail-fragment";

export async function getStaticPaths() {
  const url = new URL(`${import.meta.env.STRAPI_URL}api/tournaments`);

  const query = qs.stringify({
    populate: {
      year: {
        populate: true,
      },
      notes: {
        populate: true,
      },
      games: {
        populate: {
          home_team: {
            gameTeamFragment,
          },
          home_team_score: true,
          away_team: {
            gameTeamFragment,
          },
          fallback_winner: {
            gameTeamFragment,
          },
          round: {
            populate: {
              name: true,
            },
          },
          gameDetailFragment,
        },
      },
    },
  });

  // console.log(query);

  const data = await fetch(`${url}?${query}`).then((response) =>
    response.json()
  );

  interface yearTypes {
    attributes: {
      year: string;
    };
  }
  return data.data.map((year: yearTypes) => {
    return {
      params: { year: year.attributes.year },
      props: { year },
    };
  });
}

interface yearPageTypes {
  attributes: {
    year: string;
    notes: BlocksContent;
    games: {
      data: Array<{
        attributes: {
          home_team: {
            data: {
              attributes: {
                name: string;
                slug: string;
              };
            };
          };
          away_team: {
            data: {
              attributes: {
                name: string;
                slug: string;
              };
            };
          };
          location: {
            data: {
              attributes: {
                name: string;
                slug: string;
              };
            };
          };
          date: string;
          time: string;
          round: {
            data: {
              attributes: {
                name: string;
              };
            };
          };
          rounds: {
            data: {
              attributes: {
                name: string;
              };
            };
          };
        };
      }>;
    };
  };
}
const { year } = Astro.props as { year: yearPageTypes };

// console.log(year.attributes.games.data);

// TODO: I need a fallback for when there are no dates or times to reset the order
// create a set of the dates
const datesPlayed = new Set<string>();
for (const game of year.attributes.games.data) {
  if (game.attributes.date) {
    datesPlayed.add(game.attributes.date);
  }
}
// console.log(datesPlayed);
// convert to array
const datesArray: string[] = Array.from(datesPlayed);
const sortedDates = datesArray.sort((a, b) => a.localeCompare(b));
---

<Layout>
  <main>
    <!-- TODO: make this a left sidebar so Im doing something interesting -->
    <h1 class="font-slab">{year.attributes.year} Tournament</h1>

    {
      year.attributes.notes ? (
        <>
          <h2>Notes</h2>
          <BlocksRenderer content={year.attributes.notes} />
        </>
      ) : null
    }

    <!-- TODO: order is going to be hard unless I do it manually as only some have dates -->
    <!-- TODO: component for a score-card -->
    <section class="scoredeck">
      {
        sortedDates.map((date) => (
          <>
            {/* TODO: convert to readable dates */}
            <h2>{date}</h2>
            {year.attributes.games.data
              // sort by time
              // this needs a fallback for when there is no time
              .sort((a, b) => {
                if (a.attributes.time && b.attributes.time) {
                  return a.attributes.time.localeCompare(b.attributes.time);
                } else if (a.attributes.time) {
                  return -1; // a has time, b does not
                } else if (b.attributes.time) {
                  return 1; // b has time, a does not
                } else {
                  return 0; // neither a nor b has time
                }
              })

              // these wont work as they are not numbers
              // .sort((a, b) => a.attributes.time - b.attributes.time) // does this fallback?

              .map((game) => {
                if (game.attributes.date === date) {
                  return <Scorecard displayDate={false} {...game.attributes} />;
                }
              })}
          </>
        ))
      }
    </section>
  </main>

  <!-- <section>
    <h2>Tournaments</h2>
    <ul>
      {
        tournaments.map((tournament) => (
          <li>
            <a href={`/tournaments/${tournament.attributes.year}`}>
              {tournament.attributes.year}
            </a>
          </li>
        ))
      }
    </ul>
  </section> -->
</Layout>
